[
    {
        "command": "vs --log=error --n=10 --game-name=nim --init=initial_full.lp --out=r_VS_pruned_minmax-rule-S.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-S.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-rule-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 2,
                "total_reward": -16,
                "average_response": 0.013,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-rule-S.lp",
                "wins": 18,
                "total_reward": 16,
                "average_response": 1195.098,
                "std": 301.537
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=nim --init=initial_full.lp --out=r_VS_pruned_minmax-rule-M.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-M.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-rule-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 1,
                "total_reward": -18,
                "average_response": 0.013,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-rule-M.lp",
                "wins": 19,
                "total_reward": 18,
                "average_response": 1286.592,
                "std": 312.813
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=nim --init=initial_full.lp --out=r_VS_pruned_minmax-tree-S.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-S.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-tree-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 6,
                "total_reward": -8,
                "average_response": 0.01,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-tree-S.json",
                "wins": 14,
                "total_reward": 8,
                "average_response": 0.062,
                "std": 0.047
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=nim --init=initial_full.lp --out=r_VS_minmax-S.json_in_full.json --play-symmetry --a=random --b=minmax-S.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_minmax-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 11,
                "total_reward": 2,
                "average_response": 0.011,
                "std": 0.003
            },
            "b": {
                "style_name": "minmax-S.json",
                "wins": 9,
                "total_reward": -2,
                "average_response": 0.059,
                "std": 0.037
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=nim --init=initial_full.lp --out=r_VS_minmax-M.json_in_full.json --play-symmetry --a=random --b=minmax-M.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_minmax-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 3,
                "total_reward": -14,
                "average_response": 0.01,
                "std": 0.001
            },
            "b": {
                "style_name": "minmax-M.json",
                "wins": 17,
                "total_reward": 14,
                "average_response": 0.164,
                "std": 0.043
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_pruned_minmax-rule-S.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-S.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-rule-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 2,
                "total_reward": -14,
                "average_response": 0.012,
                "std": 0.003
            },
            "b": {
                "style_name": "pruned_minmax-rule-S.lp",
                "wins": 16,
                "total_reward": 14,
                "average_response": 2351.974,
                "std": 344.617
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_pruned_minmax-rule-M.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-M.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-rule-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 4,
                "total_reward": -10,
                "average_response": 0.011,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-rule-M.lp",
                "wins": 14,
                "total_reward": 10,
                "average_response": 2474.556,
                "std": 354.962
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_pruned_minmax-tree-S.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-S.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-tree-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 9,
                "total_reward": 0,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-tree-S.json",
                "wins": 9,
                "total_reward": 0,
                "average_response": 0.02,
                "std": 0.003
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_pruned_minmax-tree-M.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-M.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-tree-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 7,
                "total_reward": -2,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-tree-M.json",
                "wins": 9,
                "total_reward": 2,
                "average_response": 0.021,
                "std": 0.007
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_minmax-S.json_in_full.json --play-symmetry --a=random --b=minmax-S.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_minmax-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 8,
                "total_reward": -1,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "minmax-S.json",
                "wins": 9,
                "total_reward": 1,
                "average_response": 0.022,
                "std": 0.014
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_minmax-M.json_in_full.json --play-symmetry --a=random --b=minmax-M.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_minmax-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 10,
                "total_reward": 3,
                "average_response": 0.007,
                "std": 0.002
            },
            "b": {
                "style_name": "minmax-M.json",
                "wins": 7,
                "total_reward": -3,
                "average_response": 0.031,
                "std": 0.033
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_ilasp-S.lp_in_full.json --play-symmetry --a=random --b=ilasp-S.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_ilasp-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 4,
                "total_reward": -10,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "ilasp-S.lp",
                "wins": 14,
                "total_reward": 10,
                "average_response": 0.003,
                "std": 0.0
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=ttt --init=initial_full.lp --out=r_VS_ilasp-M.lp_in_full.json --play-symmetry --a=random --b=ilasp-M.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_ilasp-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 7,
                "total_reward": -6,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "ilasp-M.lp",
                "wins": 13,
                "total_reward": 6,
                "average_response": 0.003,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=10 --game-name=nim --init=initial_full.lp --out=r_VS_pruned_minmax-tree-M.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-M.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 10,
            "benchmark_output_file": "r_VS_pruned_minmax-tree-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 5,
                "total_reward": -10,
                "average_response": 0.021,
                "std": 0.01
            },
            "b": {
                "style_name": "pruned_minmax-tree-M.json",
                "wins": 15,
                "total_reward": 10,
                "average_response": 0.231,
                "std": 0.072
            }
        }
    }
]
